{"version":3,"sources":["Components/SeekerImage.js","Components/Image.js","Components/Result.js","Components/Buttons.js","App.js","serviceWorker.js","index.js"],"names":["SeekerImage","getDatos","event","key","_this","props","updateSerch","target","value","react_default","a","createElement","className","id","onKeyPress","this","type","placeholder","aria-label","aria-hidden","Component","Image","_props$image","image","largeImageURL","previewURL","tags","src","alt","onClick","name","href","role","Result","showImages","images","length","Fragment","map","src_Components_Image","Buttons","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","cargarMas","pageNew","state","page","oldImage","fetch","concat","serch","then","resp","json","datos","setState","hits","carga","window","onscroll","innerHeight","document","documentElement","scrollTop","offsetHeight","_this2","newSerch","arguments","undefined","replace","src_Components_SeekerImage","bind","src_Components_Buttons","Components_Result","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ecdb195.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './SeekerImage.css';\r\n\r\nclass SeekerImage extends Component {\r\n\r\n    getDatos = (event) => {\r\n        if (event.key===\"Enter\"){\r\n        this.props.updateSerch(event.target.value);\r\n    }\r\n  }\r\n\r\n    render() {\r\n      return (\r\n        <form >\r\n            <div className=\"content\">\r\n              <div className=\"input-header\">\r\n                <icono id=\"iconoPinterest\" className=\"fab fa-pinterest\"> </icono>\r\n                  <lupa id=\"iconoSerch\" className=\"lupa fas fa-search\"> </lupa>\r\n\t                  <input className=\"input\"  onKeyPress={this.getDatos} type=\"text\" placeholder=\" Serch\"></input>    \r\n                      <close type=\"button\" className=\"close\" aria-label=\"Close\"> <span aria-hidden=\"true\">&times; </span></close>   \r\n                        <select className=\"pines\">\r\n                          <option id=\"options\">Tus Pines</option>\r\n                          <option id=\"options\">Todos los Pines</option>\r\n                          <option id=\"options\">Pines de Productos</option>\r\n                          <option id=\"options\">Gente</option>\r\n                          <option id=\"options\">Tableros</option>\r\n                          </select>\r\n              </div>\r\n              <div className=\"iconos-header\">         \r\n                 <ul className=\"picture\">\r\n                    <li className=\"user fas fa-user-circle\"> </li>\r\n                    <li className=\"name\">Martha</li>\r\n                    <li className=\"home\">Home</li>\r\n                    <li className=\"next\">Siguiendo</li>   \r\n                    <li className=\"campana icono-campana fas fa-bell size:7x\"> </li>\r\n                    <li className=\"comentario icono-campana fas fa-comment-dots\"> </li>\r\n                    <li className=\"mas fas fa-ellipsis-h\"> </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n        </form>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default SeekerImage;","import React from 'react';\r\nimport './Image.css';\r\n\r\nconst Image = (props) => {\r\n    \r\n const {largeImageURL, key, previewURL, tags} = props.image;\r\n    return(\r\n            <div className=\"galeria\">    \r\n                <div className=\"card\">\r\n                    <figure>\r\n                    <div className=\"modal\">\r\n   \r\n                    <img className=\"img\" src={previewURL} alt={tags}  onClick= {largeImageURL} />\r\n                    <a className=\" img btn-recient\" name=\"Ver\" href={largeImageURL}  target =\" _blank\"  role=\"button\" onClick= {largeImageURL} >...</a>\r\n\r\n                    </div>\r\n\r\n                    </figure>\r\n                </div> \r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Image;\r\n\r\n//  <a className=\"btn quotes\" name=\"Quotes\" href=\" # \"  role=\"button\" onClick= {this.updateSerch} >Quotes</a>\r\n// arreglar a modal porque abre en una hoja nueva\r\n//link <a className=\"modal\" href= {largeImageURL} target =\"_blank\" > \r\n\r\n// <icono className=\"fas fa-thumbtack\"></icono>","import React, { Component } from 'react';\r\nimport Image from './Image';\r\n\r\nclass Result extends Component {\r\n\r\n    \r\n    showImages=() =>{\r\n        const images = this.props.images;\r\n\r\n        if(images.length === 0) return null; //prevengo a mostrar el array vacio cuando la Api no este disponible\r\n\r\n        return(\r\n            <React.Fragment>\r\n                <div >\r\n                        {this.props.images.map(image => (\r\n                            <div >\r\n                            <Image\r\n                                key={image.id}\r\n                                image={image}\r\n                            />\r\n                            </div>\r\n                        ))}\r\n                </div>    \r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.showImages()}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default Result;\r\n","import React, { Component } from \"react\";\r\nimport \"./Buttons.css\";\r\n\r\nclass Buttons extends Component {\r\n\r\n  updateSerch = (event)=>{\r\n    this.props.updateSerch(event.target.name)\r\n \r\n  }\r\n\r\n  render() {\r\n    return (\r\n          <div className=\"buttons\" id=\"buttons\">\r\n            <a className=\"btn quotes\" name=\"Quotes\" href=\" # \"  role=\"button\" onClick= {this.updateSerch} >Quotes</a>\r\n            <a className=\"btn fashion\" name=\"Fashion\" href=\" # \" role=\"button\" onClick={this.updateSerch}>Fashion</a>\r\n            <a className=\"btn computer\" name=\"Computer\" href=\" # \" role=\"button\" onClick={this.updateSerch}>Computer</a>\r\n            <a className=\"btn style\" name=\"Style\" href=\" # \" role=\"button\" onClick={this.updateSerch}>Style</a>\r\n            <a className=\"btn woman\" name=\"Woman\" href=\" # \" role=\"button\" onClick={this.updateSerch}>Woman</a>\r\n            <a className=\"btn pictures\" name=\"Pictures\" href=\" # \" role=\"button\" onClick={this.updateSerch}>Pictures</a>\r\n            <a className=\"btn poster\" name=\"Poster\" href=\" # \" role=\"button\" onClick={this.updateSerch}>Poster</a>\r\n            <a className=\"btn logo\" name=\"Logo\" href=\" # \" role=\"button\" onClick={this.updateSerch}>Logo</a>\r\n            <a className=\"btn architecture\" name=\"Architecture\" href=\" # \" role=\"button\" onClick={this.updateSerch}>Architecture</a>\r\n            <a className=\"btn faces\" name=\"Faces\" href=\" # \" role=\"button\" onClick={this.updateSerch}>Faces</a>\r\n            <a className=\"btn perfil\" name=\"Perfil\" href=\" # \" role=\"button\" onClick={this.updateSerch}>Perfil</a>\r\n            <a className=\"btn flowers\" name=\"Flowers\" href=\" # \" role=\"button\" onClick={this.updateSerch}>Flowers</a>\r\n            <a className=\"btn nextt fas fa-angle-right\" name=\"Eyes\" href=\" # \" role=\"button\" onClick={this.updateSerch}> </a>\r\n          </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default Buttons;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport SeekerImage from './Components/SeekerImage';\r\nimport Result from './Components/Result';\r\nimport Buttons from './Components/Buttons';\r\n\r\nclass App extends Component {\r\n\r\n constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      serch: '',\r\n      images:[] , //array para usar en el fetch\r\n      page: 1,\r\n      carga: true\r\n    }\r\n    window.onscroll = () => {\r\n    if (this.state.carga === true) {\r\n      return\r\n    }\r\n    if (  // tamaño del HTML\r\n      window.innerHeight + document.documentElement.scrollTop\r\n      === document.documentElement.offsetHeight // tamaño de la pagina\r\n    ) {\r\n      this.cargarMas();\r\n    }\r\n  };\r\n  }\r\n\r\n  cargarMas = () => {\r\n    let pageNew = this.state.page + 1\r\n     // toma el estado de la imagen anterior\r\n    let oldImage = this.state.images\r\n    fetch(`https://pixabay.com/api/?key=12127638-ec7d0e85d587ee82f41e48324&q=${this.state.serch}&image_type=photo&lang=es&page=${pageNew}&per_page=20`)\r\n      .then(resp => resp.json())\r\n      .then(datos => {\r\n        this.setState({\r\n          images: oldImage.concat(datos.hits), // metodo para unir mis arreglos\r\n          page: pageNew,\r\n          carga: false,\r\n        })\r\n      })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateSerch()\r\n  }\r\n\r\n\r\n\r\n  // utilizo fetch para consumir la Api\r\n  // lee o da error\r\n  // Busqueda Actualizada\r\n  updateSerch(newSerch = \"\") { \r\n    newSerch.replace(\" \", \"+\") // toma los espacios\r\n    fetch(`https://pixabay.com/api/?key=12127638-ec7d0e85d587ee82f41e48324&q=${newSerch}&image_type=photo&lang=es&page=${newSerch}&per_page=20`)\r\n     .then(resp => resp.json())\r\n      .then(datos => {\r\n        this.setState({\r\n          page: 1,\r\n          images: datos.hits,\r\n          serch: newSerch,\r\n          carga: false,\r\n        })\r\n      })\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      <SeekerImage updateSerch={this.updateSerch.bind(this)} />\r\n        <Buttons updateSerch={this.updateSerch.bind(this)} />\r\n          <div id=\"galeria\" className=\"imgg\">\r\n            <Result\r\n            images={this.state.images}\r\n            />\r\n      </div>\r\n    </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n//probando","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}